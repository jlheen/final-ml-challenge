/**
 * Helper function to select stock data
 * Returns an array of values
 * @param {array} rows
 * @param {integer} index
 * index 0 - Date
 * index 1 - Open
 * index 2 - High
 * index 3 - Low
 * index 4 - Close
 * index 5 - Volume
 */

// create a function for user input ("stock" ticker name)

function handleSubmit(){
    d3.event.preventDefault();
    // both (.node) & (.property) of these options work
    // more nuanced reasoning (perhaps?) for why you might choose on over the other
    var stock = d3.select("#stockInput").node().value;
    // var stock = d3.select("#stockInput").property("value");
    console.log(stock);
    d3.select("#stockInput").node().value = "";
    buildPlot(stock);
  }
  
  
  // create event for the button select
  // this is essential - if this is forgotten, the whole page won't run because it will not take the user input 
  d3.select("#submit").on("click", handleSubmit);
  
  
  function buildPlot(stockInput) {
    // var apiKey = "QCEno9eF3yUzZMLzkHYx";
    var url = `http://magic-stocks.herokuapp.com/api/v1/metrics`;
  
  // still within the buildPlot function
  // -- since the user will choose a stock 
  // and it will build a plot based off of that
  
  // starting a nested function
  // "data" is the entire JSON response to the API call
  // (name, stock, startDate) are found w/in the json 
    d3.json(url).then(function(data) {
      // Grab values from the response json object to build the plots
      // create a variable for the function input ("data") & the dataset itself ("dataset") 
      // var ds = data.dataset
    //   var name = data.dataset.name;
    //   var stockTick = data.ticker;

    //   **********************************

    //   var startDate = data.dataset.start_date;
    //   var endDate = data.dataset.end_date;

    //   **********************************

      // Print the names of the columns
    //   console.log(data.dataset.column_names);
      // Print the data for each day
    //   console.log(data.dataset.data);
      // Use map() to build an array of the the dates
      // Lesson 2 we used unpack function 
      var dates = data.map(row => row[2]);
      // Use map() to build an array of the closing prices
      var closingPrices = data.map(row => row[1]);
  
      var trace1 = {
        type: "scatter",
        mode: "lines",
        name: name,
        x: dates,
        y: closingPrices,
        line: {
          color: "#17BECF"
        }
      };
  
      var data = [trace1];
  
              // "title" doesn't take the initial input from the user ("stockInput") it takes the name generated by the data
    //   var layout = {
    //     title: `${stockTick} closing prices`,
    //     xaxis: {
    //       range: [startDate, endDate],
    //       // type of data we are giving to x-axis is a date
    //       type: "date"
    //     },
    //     yaxis: {
    //       autorange: true,
    //       type: "linear"
    //     }
    //   };
  
    // incorporate layout o
    //   Plotly.newPlot("plot", data, layout);
      Plotly.newPlot("plot", data);
  
    });
  }
  
  // Add event listener for submit button
  